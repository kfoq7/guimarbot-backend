---
import Layout from '@/layouts/Layout.astro'
import type { Course } from '@/types/Course'

const response = await fetch(`${import.meta.env.API_URL}/course`)
const data = await response.json()
const courses = data as Course[]
---

<Layout title="All Courses">
  <div class="container mx-auto pb-10 pt-28">
    <h1 class="mb-8 text-center text-3xl font-bold">Cursos habilitados</h1>

    <!-- Filter Inputs -->
    <div class="mb-6 grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
      <input
        id="categoryFilter"
        type="text"
        placeholder="Category"
        class="rounded border p-2"
      />
      <input
        id="tagFilter"
        type="text"
        placeholder="Tag"
        class="rounded border p-2"
      />
      <input
        id="minPriceFilter"
        type="number"
        placeholder="Min Price"
        class="rounded border p-2"
      />
      <input
        id="maxPriceFilter"
        type="number"
        placeholder="Max Price"
        class="rounded border p-2"
      />
      <button
        id="filterCoursesBtn"
        class="rounded bg-blue-500 px-4 py-2 text-white">Apply Filters</button
      >
    </div>

    <h1 class="mb-8 text-center text-3xl font-bold">Cursos habilitados</h1>
    <div id="courseContainer" class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
      <!-- {
        courses.map(course => (
          <div class="rounded-lg bg-white p-6 shadow-md">
            <h2 class="mb-2 text-xl font-semibold">{course.title}</h2>
            <p class="mb-4 text-gray-600">{course.description}</p>
            <p class="text-lg font-bold text-green-600">{course.price}</p>
            <button class="mt-4 w-full rounded bg-blue-500 px-4 py-2 font-semibold text-white hover:bg-blue-600">
              Comrpar ahora
            </button>
          </div>
        ))
      } -->
    </div>
  </div>
</Layout>

<script>
  import { $ } from '@/lib/dom-selector'
  import type { Course } from '@/types/Course'

  async function fetchAllCourse() {
    const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/course`)
    const data = await response.json()
    return data
  }

  const courses = await fetchAllCourse()
  const courseContainer = $('#courseContainer')
  const filterCoursesBtn = $('#filterCoursesBtn')
  if (filterCoursesBtn) {
    filterCoursesBtn.addEventListener('click', filterCourses)
  }

  // const courses =
  async function getCourseFitler(
    categoryName: string,
    minPrice: number,
    maxPrice: number
  ) {
    const response = await fetch(
      `${import.meta.env.PUBLIC_API_URL}/course/find-courses?category-name=${categoryName}&tag-name=${[].join(',')}&min-price=${minPrice}&
maxPrice=${maxPrice}`
    )

    // ?category-name=${categoryName}&tag-name=${[].join(',')}&min-price=${minPrice}&maxPrice=${maxPrice}`
    const data = await response.json()
    return data
  }

  function renderCourses(filteredCourses: Course[]) {
    if (courseContainer) {
      courseContainer.innerHTML = ''
      filteredCourses.forEach(course => {
        courseContainer.innerHTML += `
        <div class="rounded-lg bg-white p-6 shadow-md">
          <h2 class="mb-2 text-xl font-semibold">${course.title}</h2>
          <p class="mb-4 text-gray-600">${course.description}</p>
          <p class="text-lg font-bold text-green-600">${course.price}</p>
          <button class="mt-4 w-full rounded bg-blue-500 px-4 py-2 font-semibold text-white hover:bg-blue-600">
            Comprar ahora
          </button>
        </div>
      `
      })
    }
  }

  async function filterCourses() {
    const category = $('#categoryFilter') as HTMLInputElement
    const tag = $('#tagFilter') as HTMLInputElement
    const minPrice = $('#minPriceFilter') as HTMLInputElement
    const maxPrice = $('#maxPriceFilter') as HTMLInputElement

    if (category) {
      const categoryFilter = category.value.toLowerCase()
      const tagFilter = tag.value.toLowerCase()
      const minPriceFitler = parseFloat(minPrice.value) || 0
      const maxPriceFitler = parseFloat(maxPrice.value) || Infinity

      const filteredCourses = await getCourseFitler(
        categoryFilter,
        minPriceFitler,
        maxPriceFitler
      )

      renderCourses(filteredCourses)
    }
  }

  // Initial render
  renderCourses(courses)
</script>
