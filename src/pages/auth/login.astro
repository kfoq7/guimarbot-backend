<main class="flex min-h-screen">
  <div class="hidden w-1/2 md:block">
    <div id="three-container" class="absolute h-full w-1/2"></div>

    <div class="flex size-full items-center justify-center">
      <img src="/img/guimarbot.webp" class="z-[9999] m-auto size-[300px]" />
    </div>
  </div>

  <div class="flex w-full items-center justify-center bg-white md:w-1/2">
    <div class="max-w-md space-y-8 px-4 py-12 sm:px-6 lg:px-8">
      <div class="space-y-6">
        <h1
          class="text-balance text-5xl font-extrabold tracking-tight text-gray-900"
        >
          Inicia sesion en tu cuenta
        </h1>
        <p class="text-sm text-gray-500">
          No tienes una cuenta?{' '}
          <a href="/signup" class="text-primary font-medium hover:underline">
            Sign up
          </a>
        </p>
      </div>

      <form class="space-y-6" action="#" method="POST">
        <div>
          <label for="email" class="sr-only"> Email address </label>
          <input
            id="email"
            name="email"
            type="email"
            autocomplete="email"
            required
            class="w-full"
            placeholder="Email address"
          />
        </div>

        <div>
          <label for="password" class="sr-only"> Password </label>
          <input
            id="password"
            name="password"
            type="password"
            autocomplete="current-password"
            required
            class="w-full"
            placeholder="Password"
          />
        </div>

        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <input type="checkbox" id="remember-me" />
            <label for="remember-me" class="ml-2 block text-sm text-gray-900">
              Remember me
            </label>
          </div>

          <div class="text-sm">
            <a
              href="/forgot-password"
              class="text-primary font-medium hover:underline"
            >
              Forgot your password?
            </a>
          </div>
        </div>

        <button type="submit" class="w-full"> Sign in </button>
      </form>

      <div class="mt-6">
        <div class="relative">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-300"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="bg-white px-2 text-gray-500">Or continue with</span>
          </div>
        </div>

        <div class="mt-6 grid grid-cols-2 gap-6 text-white">
          <button
            class="flex w-full items-center justify-center rounded-sm bg-zinc-900 py-4"
          >
            <svg
              class="mr-2 h-5 w-5"
              fill="currentColor"
              viewBox="0 0 20 20"
              aria-hidden="true"
            >
              <path
                d="M6.29 18.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0020 3.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.073 4.073 0 01.8 7.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 010 16.407a11.616 11.616 0 006.29 1.84"
              ></path>
            </svg>
            Twitter
          </button>

          <button
            class="flex w-full items-center justify-center rounded-sm bg-zinc-900 py-4"
          >
            <svg
              class="mr-2 h-5 w-5"
              fill="currentColor"
              viewBox="0 0 20 20"
              aria-hidden="true"
            >
              <path
                d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z"
              ></path>
            </svg>
            GitHub
          </button>
        </div>
      </div>
    </div>
  </div>
</main>

<script>
  import * as THREE from 'three'

  document.addEventListener('DOMContentLoaded', async () => {
    try {
      const { default: HALO } = await import('vanta/dist/vanta.fog.min')

      HALO({
        el: '#three-container',
        mouseControls: true,
        touchControls: true,
        gyroControls: false,
        minHeight: 200.0,
        minWidth: 200.0,
        highlightColor: 0xffffff,
        midtoneColor: 0x1df5,
        lowlightColor: 0xffffff,
        baseColor: 0xfc,
        blurFactor: 0.54,
        speed: 5.0,
        zoom: 0.9,
        THREE: THREE
      })
    } catch (error) {
      console.error('Error al cargar el efecto Vanta:', error)
    }
  })
</script>

<!-- Script Three.js para el cÃ­rculo -->
<script>
  import * as THREE from 'three'

  const container = document.getElementById('three-container')
  const scene = new THREE.Scene()
  const camera = new THREE.PerspectiveCamera(
    75,
    container.clientWidth / container.clientHeight,
    0.1,
    1000
  )
  const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true }) // alpha true para fondo transparente
  renderer.setSize(container.clientWidth, container.clientHeight)
  container.appendChild(renderer.domElement)

  // Fondo del contenedor
  scene.background = null // Fondo transparente para mezclar con Vanta

  const vertexShader = `
    varying vec2 vUv;
    void main() {
      vUv = uv;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
  `

  const fragmentShader = `
    varying vec2 vUv;
    void main() {
      float dist = distance(vUv, vec2(0.5, 0.5));
      float alpha = smoothstep(0.4, 0.5, dist); // Degradado en el borde
      gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0 - alpha);
    }
  `

  const shaderMaterial = new THREE.ShaderMaterial({
    vertexShader,
    fragmentShader,
    transparent: true // Hacer que el material sea transparente
  })

  const geometry = new THREE.CircleGeometry(2, 32)
  const material = new THREE.MeshBasicMaterial({ color: 0x1e1e2e })
  const circle = new THREE.Mesh(geometry, shaderMaterial)
  scene.add(circle)

  camera.position.z = 5

  const mouse = new THREE.Vector2()
  const target = new THREE.Vector2()
  const lerp = 0.05
  const maxOffset = 0.3

  function onMouseMove(event) {
    const rect = container.getBoundingClientRect()
    mouse.x = ((event.clientX - rect.left) / container.clientWidth) * 2 - 1
    mouse.y = -((event.clientY - rect.top) / container.clientHeight) * 2 + 1

    target.x = Math.max(Math.min(mouse.x * maxOffset, maxOffset), -maxOffset)
    target.y = Math.max(Math.min(mouse.y * maxOffset, maxOffset), -maxOffset)
  }

  container.addEventListener('mousemove', onMouseMove)

  function animate() {
    requestAnimationFrame(animate)

    circle.position.x += (target.x - circle.position.x) * lerp
    circle.position.y += (target.y - circle.position.y) * lerp

    renderer.render(scene, camera)
  }

  function onWindowResize() {
    camera.aspect = container.clientWidth / container.clientHeight
    camera.updateProjectionMatrix()
    renderer.setSize(container.clientWidth, container.clientHeight)
  }

  window.addEventListener('resize', onWindowResize)

  animate()
</script>
